@inherits UmbracoViewPage<BlockListItem>

@{
	var row = (TwoColumnContent)Model.Content;
	if (row == null) return;
	var withColumn1 = row.Value<int>("widthOfColumn1");
	var withColumn2 = row.Value<int>("widthOfColumn2");
	var contentList = row.Columns.ToList();
    // Boolean value from Umbraco CMS to control column-reversal
    var columnReverseMobile = row.Value<bool>("columnReverseMobile");
}
<!-- This elements allows users to set two columns in a single row. They can dictate the % of space that each column will consume-->
<section class="columns-section">
	<div class="columns-container @(columnReverseMobile ? "reverse-columns" : "")">
		@for (var i = 0; i < contentList.Count; i++)
        {
            var content = contentList[i].Content as IPublishedElement;
            if (content != null)
            {
                // Check if the content is a Rich Text Editor
                if (content.HasProperty("content"))
                {
                    var textContent = content.Value<string>("content");
                    <div class="column" style="flex: 0 0 @(i == 0 ? withColumn1 : withColumn2)%;">
                        @Html.Raw(textContent)
                    </div>
                }
                // Check if the content is an Image
                else if (content.HasProperty("image"))
                {
                    var image = content.Value<IPublishedContent>("image");
                    <div class="column" style="flex: 0 0 @(i == 0 ? withColumn1 : withColumn2)%;">
                        <img src="@image.Url()" alt=@image.Name />
                    </div>
                }
                // Check if the content is a group of producs
                else if (content.HasProperty("listOfProducts"))
                {
                    
                        var productsList = (ProductSummarizedContent)content;
                        foreach (var productNode in productsList.ListOfProducts) // Assuming 'ListOfProducts2' is the Multinode Treepicker alias
                        {
                            // Cast each productNode to IPublishedContent
                            var product = productNode as IPublishedContent;
                            if (product != null)
                            {
                                // Access the parent node (Tienda Nutrir)
                                var storeNode = product.AncestorOrSelf("store");
                                // Access the store's phone number
                                var storePhoneNumber = storeNode?.Value<string>("phoneNumber");
                                // Access the product's name
                                var name = product.Value<string>("productName");
                                // Access the product's image
                                var picture = product.Value<IPublishedContent>("productImage");
                                // Access the product's description
                                var description = product.Value<string>("productDescription");
                                // Access the product's price
                                var price = product.Value<decimal>("productPrice"); // Assuming price is a decimal
                                // Access the purchase message
                                var purchaseMessage = product.Value<string>("productPurchaseMessage");
                                // Format the price with commas
                                var formattedPrice = price.ToString("N0"); // 'N0' for thousands with no decimals
                                // Render the product information
                                <div class="cardTwoCol">
                                    @if (picture != null)
                                    {
                                        <img src="@picture.Url()" alt="@name" class="product-imageTwoCol">
                                    }
                                    <h2>@name</h2>
                                    <p class="priceTwoCol">$@formattedPrice</p>
                                    <a href="https://api.whatsapp.com/send/?phone=@storePhoneNumber&text=@purchaseMessage &type=phone_number&app_absent=0" target="_blank" class="buy-buttonTwoCol">Compra aquí</a>
                                </div>
                            }
                        }
                }
                else if (content.HasProperty("gridName"))
                {
                    <div class="donation-grid">
                        <div class="donation-header">
                            <div class="header-cell blue">Apadrina un niño que <br> <div class="bold">Desayuna y Almuerza</div> diariamente.</div>
                            <div class="header-cell green">Apadrina un niño que <br> <div class="bold">Almuerza</div> diariamente.</div>
                        </div>

                        <!-- Donation Values with Row Buttons -->
                        <div class="donation-values">
                            <!-- Row for "Mes" -->
                            <button class="btn time-btn no-border" onclick="showDonateButtons('mes')">Mes <i class="fa-solid fa-arrow-pointer"></i></button>
                            <div class="cell"><p>$130.700</p></div>
                            <div class="cell"><p>$29</p></div>
                            <div class="cell"><p>$84.600</p></div>
                            <div class="cell"><p>$19</p></div>

                            <!-- Row for "Semestre" -->
                            <button class="btn time-btn no-border" onclick="showDonateButtons('semestre')">Semestre <i class="fa-solid fa-arrow-pointer"></i></button>
                            <div class="cell"><p>$784.000</p></div>
                            <div class="cell"><p>$174</p></div>
                            <div class="cell"><p>$508.000</p></div>
                            <div class="cell"><p>$113</p></div>

                            <!-- Row for "Año" -->
                            <button class="btn time-btn no-border" onclick="showDonateButtons('ano')">Año <i class="fa-solid fa-arrow-pointer"></i></button>
                            <div class="cell"><p>$1.568.000</p></div>
                            <div class="cell"><p>$348</p></div>
                            <div class="cell"><p>$1.015.000</p></div>
                            <div class="cell"><p>$226</p></div>

                            <!-- Currency Switch Row -->
                            <div class="currency-switch no-border"><p></p></div>
                            <div class="currency-switch"><p>$ COP</p></div>
                            <div class="currency-switch"><p>$ USD</p></div>
                            <div class="currency-switch"><p>$ COP</p></div>
                            <div class="currency-switch"><p>$ USD</p></div>
                        </div>

                        <!-- Donation Buttons for Columns 1 and 2 -->
                        <div class="buttons-cell">
                            <div class="donation-buttons left-buttons">
                                <h2>Para desayuno y almuerzo mensual</h2>
                                <button class="donate-btn green-btn">Donar en COP</button>
                                <button class="donate-btn green-btn">Donar en USD</button>
                            </div>

                            <!-- Donation Buttons for Columns 3 and 4 -->
                            <div class="donation-buttons right-buttons">
                                <h2>Para almuerzo mensual</h2>
                                <button class="donate-btn green-btn">Donar en COP</button>
                                <button class="donate-btn green-btn">Donar en USD</button>
                            </div>
                        </div>
                    </div>
    <style>
        /* General Styles */

.donation-grid {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
}

.donation-header{
    margin-left: 121px;
}

.header-cell {
    display: inline-block;
    width: 49%;
    padding: 5px;
    color: white;
    font-family: "NeutraText-BookAlt", Sans-serif;
    font-size: 16px;
    font-weight: 400;
    margin: 0;
    box-sizing: border-box;
}

.bold { font-weight: bold; }

.blue {
    background-color: #066eb1;
    border-radius: 30px 0px 0px 0px;
}

.green {
    background-color: #9bc11c;
    border-radius: 0px 30px 0px 0px;
}

.donation-values {
    display: grid;
    grid-template-columns: auto repeat(4, 1fr); /* Extra column for buttons */
    gap: 0;
    margin-top: 0;
}

.cell, .currency-switch {
    padding: 10px;
    border: 1px solid black;
}

.no-border{border: 0px;}

.cell p, .currency-switch p {
    color: #0066b3;
    text-decoration: none;
    font-weight: bold;
    text-align: center;
    font-family: "NeutraText-BookAlt", Sans-serif;
    font-size: 20px;
}

.currency-switch {
    font-size: 14px;
}

.buttons-cell {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
}

.donation-buttons {
    margin-top: 20px;
    text-align: center;
}

.donation-buttons h2 {
    color: #066EB1;
    font-family: "NeutraText-BookAlt", Sans-serif;
    font-size: 22px;
    font-weight: 600;
}

.donate-btn {
    padding: 10px 30px;
    margin: 10px;
    background-color: #97c021;
    color: white;
    border: none;
    border-radius: 20px;
    font-size: 16px;
    cursor: pointer;
}

.donate-btn:hover {
    background-color: #88a81b;
}

/* Time button styling */
.time-btn {
    background-color: #066EB1;
    font-weight: bold;
    text-align: center;
    cursor: pointer;
    color: white;
    height: 40px;
    margin-top: 10px;
    width: 120px;
    border-radius: 15px 0px 0px 15px;
}

.time-btn:hover {
    background-color: #97c021;
}

    </style>
                }
            }
        }
	</div>
</section>